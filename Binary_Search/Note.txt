--> Binary Search Algorithm

Binary Search is a fundamental algorithm used to search for a target element in a sorted array or list. It works by repeatedly dividing the search interval in half until the target element is found or the interval becomes empty.

--> How it works:
1.Initialize: Define the left and right boundaries of the search interval as the first and last indices of the array, respectively.

2.Loop: While the left boundary is less than or equal to the right boundary:

 * Calculate the middle index of the current interval.
 * Compare the target element with the element at the middle index.
 * If the target element matches, return the index of the middle element.
 * If the target element is smaller, adjust the right boundary to be the middle index - 1.
 * If the target element is larger, adjust the left boundary to be the middle index + 1.

3.Return: If the target element is not found after the loop, return -1 to indicate that it is not present in the array.

--> Example:
Suppose we have the sorted array [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] and we want to search for the element 12.

1.Initial boundaries: left = 0, right = 9 (length of array - 1).
2.First iteration: middle index = 4, middle element = 10.
   * Since 12 > 10, adjust left boundary to 5.
3.Second iteration: middle index = 7, middle element = 16.
   * Since 12 < 16, adjust right boundary to 6.
4.Third iteration: middle index = 5, middle element = 12.
   * Target element found at index 5.

--> Complexity:

* Time complexity: O(log n)
* Space complexity: O(1)

Binary Search is efficient for searching in sorted arrays and lists and is widely used in various applications.